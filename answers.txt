1)
Arrow functions, rest/spread operators, block-scoped variables, template literals, classes, promises

2)

3)
Arrow function doesnt have its own 'this' it takes it from outside.

4)
myFunctionCall(++foo): foo will increment by on and call myFunctionCall
myFunctionCall(foo++): will call myFunctionCall and then increment foo by 1

5)
Class is blueprint to create instances that have properties and methods.
It can have static methods and properties that can be used without creating an
instance and are shared among all instances of this class.
Classes can extends parent class.
Class can be abstract, it is used only to be extended by some other classes, we cant create instance with abstract class.

Function is a set af code that can just reuse multiple times.

6)
class, id, tag in css have their own specificity.
property with highest specificity will override p-ty with lower one.

<div id="one" class="one"></div>

#one.one {
color: red
}

#one {
color: blue
}

color will be red: summary specificity of #one.one  is higher than just #one

7)
!important has the highest specificity. It overrides every p-ty.
using !important may cause problems if we want to change property with script.

8)
flex

9)
Yes, negative margins are legal.
margin: -20px - will reduce size of each side by 20px;

10)
Collapsing margins.
Solution: Margins of inline-block boxes do not collapse
p {
    display: inline-block;
}


11)
Jasmine and Karma

12)

13)


17)
Subject doesnt have initial value and doesnt preserve state,
BehaviorSubject has initial value and preserve last value,
ReplaySubject is as BehaviorSubject but it can preserve multiple values.


I will use Subject when I dont need initial value,
I will use BehaviorSubject to when I need initial value and need to create something like state management.
I Will use ReplaySubject when I need to be aware about previous and current values.



18)
import { from } from 'rxjs';
import { flatMap } from 'rxjs/operators';

const source = from([[1,2,3], [4,5]])
.pipe(
  flatMap(res => res),
)
.subscribe(res => console.log(res));

19)
import { Subject, interval} from 'rxjs';
import { scan } from 'rxjs/operators';

const subject = new Subject();

interval(1000).subscribe(res => subject.next(res));

subject
.pipe(
  scan((a, c) => [...a, c], []),
  )
.subscribe(res => console.log(res));

20)
Didn`t use Twilio Apiâ€™s
